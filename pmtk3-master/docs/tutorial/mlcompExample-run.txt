#!/usr/bin/octave -qf
% This file was autogenerated by mlcompCompiler.m and will
% only run in Octave.

args = argv(); % remainder of script begins after function defs.

%%%%%%%%%%%% FIT FUNCTION %%%%%%%%%%%%
function model = linregFitSimple(X, y, lambda)
if lambda == 0
  w = X\y;
else
  D = size(X,2);
  if isscalar(lambda)
    lambda = lambda*ones(D,1);
  end
  XX  = [X; diag(sqrt(lambda))];
  yy = [y; zeros(D,1)];
  w  = XX \ yy; 
end
model.w = w;
model.modelType = 'linreg';
yhat = X*w;
model.sigma2 = var( (y-yhat) );
end

%%%%%%%%%%%% PREDICT FUNCTION %%%%%%%%%%%%
function [yhat, v] = linregPredict(model, X)
if isfield(model, 'preproc')
    [X] = preprocessorApplyToTest(model.preproc, X);
end
yhat = X*model.w;
if nargout >= 2 
  [N] = size(X,1);
  v = model.sigma2*ones(N,1);
end
end

%%%%%%%%%%%% DEPENDENCIES %%%%%%%%%%%%

function X = addOnes(X)
    X = [ones(size(X, 1), 1), X];
end

function [X, mu] = centerCols(X, mu)
if nargin < 2 || isempty(mu)
  mu = mean(X); % across columns (if matrix)
end
[n p] = size(X);
X = bsxfun(@minus, X, mu);
end

.... many other functions omitted

%%%%%%%% DATA STUFF %%%%%%%

function text = getText(textFile)
text = {};
w = which(textFile);
if ~isempty(w)
    textFile = w;
end
fid = fopen(textFile);
if(fid < 0)
    fprintf('Sorry could not open %s\n',textFile);
    return;
end
alloc = cell(5000, 1);
text  = alloc;
i = 1;
while(true)
    tline = fgetl(fid);
    if ~ischar(tline)
        break;
    end
    text{i} = tline;
    i = i+1;
    if i > numel(text)
        text = [text; alloc]; %#ok
    end
end
text = text(1:i-1);
fclose(fid);
end

function [X, y, comments] = mlcompReadData(fpath)
raw = cellfun(@strtrim, getText(fpath), 'UniformOutput', false);
iscomment = cellfun(@(s)s(1) == '#', raw);
comments = raw(iscomment);
data  = raw(~iscomment);
ragged = cellfun(@(c)str2num(strrep(c, ':', ' ')), data, 'UniformOutput', false);
n = numel(ragged);
d = max(cellfun(@(c)c(end-1), ragged, 'ErrorHandler', @(varargin)0));
X = zeros(n, d);
y = zeros(n, 1);
for i=1:n
    row = ragged{i};
    y(i) = row(1);
    X(i, row(2:2:end)) = row(3:2:end);
end
end

%%%%%%%%%%%% START SCRIPT %%%%%%%%%%%%

switch(args{1})
    case 'learn'
        [X, y] = mlcompReadData(args{2});
        fitArgs = {0.1};
        model = linregFitSimple(X, y, fitArgs{:});
        save('model', 'model');
    case 'predict'
        S = load('model');
        model = S.model;
        [X, y] = mlcompReadData(args{2});
        predictArgs = {};
        yhat = linregPredict(model, X, predictArgs{:});
        fid = fopen(args{3}, 'w');
        for i=1:numel(yhat)
            fprintf(fid, '%f\n', yhat(i));
        end
        fclose(fid);
    otherwise
        fprintf('%s is not a supported option', args{1});
end
